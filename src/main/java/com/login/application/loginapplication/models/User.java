package com.login.application.loginapplication.models;

import org.hibernate.annotations.NaturalId;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

/**
 * The Class User. This class is used to create a @{link User} object. This
 * object is used to store user information in the database.
 * 
 * The {@code @Entity} annotation is used to specify that the class is an
 * entity. An entity is a class that is mapped to a table in the database.
 * 
 * The {@code @Table} annotation is used to specify the name of the table that
 * the entity is mapped to.
 * 
 * The {@code @Getter} and {@code @Setter} annotations are used to generate
 * getters and setters for the class.
 * 
 * The {@link @NotBlank} annotation is used to specify that
 * the password cannot be blank.
 * 
 * @author Alex Koh
 */
@Getter
@Setter
@Entity
@Table(name = "users", uniqueConstraints = {
        @UniqueConstraint(columnNames = "username")
})
public class User {
    /**
     * The id which is the primary key for the table and is auto-generated.
     * The {@link @Id} annotation is used to specify the primary key.
     * The {@link @GeneratedValue} annotation is used to specify that the id is
     * auto-generated.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The username. The {@link @NaturalId} annotation is used to specify that
     * the username is a natural identifier. A natural identifier is a unique
     * identifier that is not generated by the database.
     */
    @NaturalId
    @NotBlank
    private String username;

    /**
     * The name.
     */
    @NotBlank
    private String name;

    /**
     * The password.
     */
    @NotBlank
    private String password;

    /**
     * Returns true if the user is a manager.
     */
    private boolean isManager;

    /**
     * Instantiates a new user.
     */
    public User() {
    }

    /**
     * Instantiates a new user.
     * 
     * @param username  the username
     * @param password  the password
     * @param name      the name
     * @param isManager true if the user is a manager
     */
    public User(String username, String password, String name, Boolean isManager) {
        this.username = username;
        this.password = password;
        this.name = name;
        this.isManager = isManager;
    }

    /**
     * Returns a string representation of the object.
     * 
     * @return a string representation of the object
     */
    public String toString() {
        return "User: {" +
                "id: " + id + ", " +
                "username: " + username + ", " +
                "name: " + name + ", " +
                "isManager: " + isManager + "}";
    }
}
